// 1. IMPORT ======================================================================================
import { useEffect, useState, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Route, Switch, useHistory } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import { recognition, speak, toggleRecognition } from './api/voiceRecognition';
import { addVideos } from './redux/actionCreators/videosActionCreator';

import Home from './components/Home/Home';
import Navbar from './components/Navbar/Navbar';
import PopUp from './components/PopUp';
import OpenVideoHome from './components/OpenVideo/OpenVideoHome';
import CurrentVideo from './components/CurrentVideo/CurrentVideo';
import Videos from './components/Videos/Videos';
import Search from './components/Search/Search';
import ChatWithAI from './components/AIChat/ChatWithAI';
import InstructionScreen from './components/InstructionScreen/InstructionScreen';
import Page404 from './components/Page404/Page404';
import Footer from './components/Footer/Footer';
// 2. COMPONENT ====================================================================================
const App = () => {
  // 2.1 STATE =====================================================================================
  const [greet, setGreet] = useState(false);
  const [isRecognitionActive, setIsRecognitionActive] = useState(false);
  const [popUp, setPopUp] = useState(true);
  const [openVideoHome, setOpenVideoHome] = useState(false);
  const [selectedVideos, setSelectedVideos] = useState([]);
  const [start, setStart] = useState(0);
  const [end, setEnd] = useState(12);
  const [countPages, setCountPages] = useState(1);
  const [isSpeaking, setIsSpeaking] = useState(false);

  const videoRef = useRef(null);
  const scrollInterval = useRef(null);

  const history = useHistory();
  const dispatch = useDispatch();

  const videosLoading = useSelector((state) => state.videos.videosLoading);
  const videos = useSelector((state) => state.videos.videos);
  const popularVideos = useSelector((state) => state.videos.popularVideos);
  const searchResults = useSelector(
    (state) => state.searchResult.searchResults
  );

  // 2.2 USEEFFECT =================================================================================
  useEffect(() => {
    if (videosLoading) {
      dispatch(addVideos());
    }
  }, [dispatch, videosLoading]);

  useEffect(() => {
    if (!greet) {
      Greet();
      setGreet(true);
    }
  }, [greet]);

  useEffect(() => {
    if (!recognition) return;

    recognition.onresult = async (event) => {
      const command = event.results[0][0].transcript
        .toLowerCase()
        .replace('.', '')
        .trim();
      console.log('L·ªánh nh·∫≠n ƒë∆∞·ª£c:', command);

      await handleVoiceCommand(command);
    };

    recognition.onend = () => {
      console.log('onend ·ªü App');
      if (!isSpeaking) {
        console.log('Restart recognition sau onend');
        toggleRecognition(true, null, null);
      }
    };
  }, [isRecognitionActive]);

  const searchResultsRef = useRef([]);

  useEffect(() => {
    searchResultsRef.current = searchResults;
  }, [searchResults]);

  // 2.3 HANDLE FUNCTIONS ==========================================================================
  // H√†m x·ª≠ l√Ω l·ªánh gi·ªçng n√≥i
  const handleVoiceCommand = async (command) => {
    const handled = await handleInstructionToggle(command);
    if (handled) return; // n·∫øu ƒë√£ x·ª≠ l√Ω m·ªü/ƒë√≥ng b·∫£ng h∆∞·ªõng d·∫´n th√¨ d·ª´ng lu√¥n

    const lowerCommand = command.toLowerCase();

    if (lowerCommand.includes('ƒëi t·ªõi')) {
      await speak('ƒêang ƒëi·ªÅu h∆∞·ªõng...', () => setIsSpeaking(false));
      await handleNavigation(command);
    } else if (lowerCommand.includes('quay l·∫°i')) {
      history.goBack();
      await speak('ƒêang quay l·∫°i', () => setIsSpeaking(false));
    } else if (lowerCommand.includes('ti·∫øn t·ªõi')) {
      history.goForward();
      await speak('ƒêang ti·∫øn t·ªõi', () => setIsSpeaking(false));
    } else if (lowerCommand.includes('m·ªü video')) {
      await handleVideoSelection(command);
      await speak('ƒê√£ m·ªü video', () => setIsSpeaking(false));
    } else if (
      lowerCommand.includes('ph√°t video') ||
      lowerCommand.includes('t·∫°m d·ª´ng video') ||
      lowerCommand.includes('tua')
    ) {
      await handleVideoControl(command);
      await speak('ƒê√£ x·ª≠ l√Ω video', () => setIsSpeaking(false));
    } else if (lowerCommand.includes('trang ti·∫øp')) {
      await nextPage();
      await speak('ƒê√£ chuy·ªÉn trang', () => setIsSpeaking(false));
    } else if (lowerCommand.includes('trang tr∆∞·ªõc')) {
      await prevPage();
      await speak('ƒê√£ chuy·ªÉn trang', () => setIsSpeaking(false));
    } else if (lowerCommand.includes('k√©o')) {
      await handleScroll(command);
      await speak('ƒê√£ x·ª≠ l√Ω cu·ªôn trang', () => setIsSpeaking(false));
    } else if (lowerCommand.includes('t√¨m ki·∫øm')) {
      await handleSearch(command);
      await speak('ƒê√£ t√¨m ki·∫øm', () => setIsSpeaking(false));
    } else {
      await speak('L·ªánh kh√¥ng h·ª£p l·ªá', () => setIsSpeaking(false));
    }
  };

  const handleInstructionToggle = async (command) => {
    const lowerCommand = command.toLowerCase();

    // M·ªü b·∫£ng h∆∞·ªõng d·∫´n
    if (
      lowerCommand.includes('m·ªü l·ªánh') ||
      lowerCommand.includes('xem h∆∞·ªõng d·∫´n') ||
      lowerCommand.includes('m·ªü b·∫£ng h∆∞·ªõng d·∫´n')
    ) {
      setPopUp(true);
      setIsRecognitionActive(false);
      toggleRecognition(false, null, null);
      toast.dark('ƒêang m·ªü b·∫£ng h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng');
      await speak('ƒêang m·ªü b·∫£ng h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng');
      return true; // b√°o hi·ªáu ƒë√£ x·ª≠ l√Ω l·ªánh
    }

    // ƒê√≥ng b·∫£ng h∆∞·ªõng d·∫´n
    if (
      lowerCommand.includes('ƒë√≥ng l·ªánh') ||
      lowerCommand.includes('ƒë√≥ng h∆∞·ªõng d·∫´n') ||
      lowerCommand.includes('ƒë√≥ng b·∫£ng h∆∞·ªõng d·∫´n')
    ) {
      setPopUp(false);
      setIsRecognitionActive(false);
      toggleRecognition(false, null, null);
      toast.dark('ƒê√£ ƒë√≥ng b·∫£ng h∆∞·ªõng d·∫´n');
      await speak('ƒê√£ ƒë√≥ng b·∫£ng h∆∞·ªõng d·∫´n');
      return true;
    }

    return false; // kh√¥ng ph·∫£i l·ªánh m·ªü/ƒë√≥ng b·∫£ng h∆∞·ªõng d·∫´n
  };

  // H√†m ƒëi·ªÅu h∆∞·ªõng t·ªõi trang
  const handleNavigation = async (command) => {
    let pageName = command.replace('ƒëi t·ªõi', '').trim().toLowerCase();

    // Map c√°c t·ª´ ti·∫øng Vi·ªát ng∆∞·ªùi d√πng n√≥i th√†nh route chu·∫©n
    const pageMapping = {
      'trang ch·ªß': '/',
      home: '/',
      video: '/videos',
      't√¨m ki·∫øm': '/search',
      search: '/search',
      'tr√≤ chuy·ªán': '/chat',
      chat: '/chat',
      'h∆∞·ªõng d·∫´n': '/instruction',
      instruction: '/instruction',
    };

    const matchedRoute = pageMapping[pageName];

    if (matchedRoute) {
      if (matchedRoute === '/search') {
        history.push({ pathname: '/search', state: { text: '' } });
        await speak('B·∫°n mu·ªën t√¨m ki·∫øm g√¨? H√£y n√≥i t√¨m ki·∫øm c·ªông t·ª´ kho√°.');
      } else {
        history.push(matchedRoute);
        await speak(`ƒê√£ chuy·ªÉn t·ªõi ${pageName}`);
      }
    } else {
      await speak('Trang n√†y kh√¥ng t·ªìn t·∫°i. Vui l√≤ng th·ª≠ l·ªánh kh√°c.');
    }
  };

  const handleScroll = async (command) => {
    if (!command) return;

    const scrollOptions = { behavior: 'smooth' };
    const maxScroll =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const lowerCaseCommand = command.toLowerCase();

    // D·ª´ng cu·ªôn
    if (
      lowerCaseCommand.includes('d·ª´ng k√©o') ||
      lowerCaseCommand.includes('d·ª´ng k√©o') ||
      lowerCaseCommand.includes('ng∆∞ng k√©o') ||
      lowerCaseCommand.includes('ng·ª´ng k√©o') ||
      lowerCaseCommand.includes('stop') ||
      lowerCaseCommand.includes('th√¥i k√©o')
    ) {
      if (scrollInterval.current) {
        clearInterval(scrollInterval.current);
        scrollInterval.current = null;
        console.log('üõë ƒê√£ d·ª´ng cu·ªôn trang!');
      }
      return;
    }

    // N·∫øu ƒëang c√≥ cu·ªôn c≈© th√¨ d·ª´ng l·∫°i
    if (scrollInterval.current) {
      clearInterval(scrollInterval.current);
      scrollInterval.current = null;
    }

    // Cu·ªëi trang
    if (lowerCaseCommand.includes('cu·ªëi trang')) {
      window.scrollTo({ top: maxScroll, ...scrollOptions });
      return;
    }

    // ƒê·∫ßu trang
    if (lowerCaseCommand.includes('ƒë·∫ßu trang')) {
      window.scrollTo({ top: 0, ...scrollOptions });
      return;
    }

    // K√©o xu·ªëng li√™n t·ª•c
    if (
      lowerCaseCommand.includes('k√©o xu·ªëng') ||
      lowerCaseCommand.includes('cu·ªôn xu·ªëng')
    ) {
      scrollInterval.current = setInterval(() => {
        if (
          window.scrollY + window.innerHeight >=
          document.documentElement.scrollHeight
        ) {
          clearInterval(scrollInterval.current);
          scrollInterval.current = null;
          console.log('‚úÖ ƒê√£ t·ªõi cu·ªëi trang!');
          return;
        }
        window.scrollBy({ top: 10, behavior: 'smooth' });
      }, 30);
      return;
    }

    // K√©o l√™n li√™n t·ª•c
    if (
      lowerCaseCommand.includes('k√©o l√™n') ||
      lowerCaseCommand.includes('cu·ªôn l√™n')
    ) {
      scrollInterval.current = setInterval(() => {
        if (window.scrollY <= 0) {
          clearInterval(scrollInterval.current);
          scrollInterval.current = null;
          console.log('‚úÖ ƒê√£ t·ªõi ƒë·∫ßu trang!');
          return;
        }
        window.scrollBy({ top: -10, behavior: 'smooth' });
      }, 30);
      return;
    }

    console.log(' Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c l·ªánh cu·ªôn!');
  };

  const handleVideoSelection = async (command) => {
    const num = command.match(/\d+/);
    if (!num) {
      speak('B·∫°n ch∆∞a n√≥i s·ªë th·ª© t·ª± c·ªßa video.');
      return;
    }
    const n = parseInt(num[0], 10);
    const path = history.location.pathname;
    let target = null;

    if (path.startsWith('/video/')) {
      const currentId = path.split('/')[2];
      const related = videos.filter((v) => v.id.videoId !== currentId);
      if (n < 1 || n > related.length) {
        speak('Kh√¥ng c√≥ video t∆∞∆°ng ·ª©ng trong danh s√°ch g·ª£i √Ω.');
        return;
      }
      target = related[n - 1];
    } else if (path.startsWith('/videos')) {
      const globalIndex = start + (n - 1);
      if (globalIndex < 0 || globalIndex >= videos.length) {
        speak('S·ªë th·ª© t·ª± v∆∞·ª£t qu√° t·ªïng s·ªë video.');
        return;
      }
      target = videos[globalIndex];
    } else if (path.startsWith('/search')) {
      console.log('üì¶ searchResults:', searchResults);
      if (n < 1 || n > searchResults.length) {
        speak('S·ªë th·ª© t·ª± v∆∞·ª£t qu√° s·ªë video tr√™n trang.');
        return;
      }
      target = searchResults[n - 1];

    } else {
      // Trang Home
      if (n % 2 === 1) {
        const idx = (n - 1) / 2;
        if (idx >= videos.length) {
          speak('Kh√¥ng c√≥ video t∆∞∆°ng ·ª©ng.');
          return;
        }
        target = videos[idx];
      } else {
        const idx = n / 2 - 1;
        if (idx >= popularVideos.length) {
          speak('Kh√¥ng c√≥ video t∆∞∆°ng ·ª©ng.');
          return;
        }
        target = popularVideos[idx];
      }
    }

    console.log('üéØ target video', target);
    if (target?.id?.videoId) {
      history.push(`/video/${target.id.videoId}`);
    } else {
      speak('Kh√¥ng th·ªÉ m·ªü video. ƒê·ªãnh d·∫°ng video kh√¥ng h·ª£p l·ªá.');
    }
  };

  const handleVideoControl = (command) => {
    const player = videoRef.current;
    if (!player) {
      speak('Ch∆∞a c√≥ video n√†o ƒëang ph√°t.');
      return;
    }

    const lc = command.toLowerCase().trim();

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. Ph√°t / ti·∫øp t·ª•c ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    if (/(ph√°t\s+(video|ti·∫øp)|ti·∫øp t·ª•c)/.test(lc)) {
      player.playVideo();
      return;
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. T·∫°m d·ª´ng ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    if (/(t·∫°m\s*d·ª´ng|pause|d·ª´ng\s+video)/.test(lc)) {
      player.pauseVideo();
      return;
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. Tua video ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    if (lc.includes('tua') || lc.includes('tour') || lc.includes('tu') || lc.includes('to')) {
      const foundNumber = lc.match(/\d+/);
      let seconds = foundNumber ? +foundNumber[0] : 10;
      if (lc.includes('ph√∫t')) seconds *= 60;

      const isForward = /(t·ªõi|nhanh|tr∆∞·ªõc|l√™n)/.test(lc);
      const isBackward = /(l√πi|v·ªÅ|l·∫°i|xu·ªëng)/.test(lc);

      const now = player.getCurrentTime?.();
      if (typeof now !== 'number') {
        speak('Kh√¥ng th·ªÉ l·∫•y th·ªùi gian hi·ªán t·∫°i c·ªßa video.');
        return;
      }

      let targetTime = isForward
        ? now + seconds
        : isBackward
          ? now - seconds
          : now + seconds;

      if (!player.seekTo || typeof player.seekTo !== 'function') {
        speak('Kh√¥ng th·ªÉ tua video l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i.');
        return;
      }

      targetTime = Math.max(0, targetTime);
      player.seekTo(targetTime, true);
    }


    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. L·ªánh kh√¥ng kh·ªõp ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    speak('Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c l·ªánh ƒëi·ªÅu khi·ªÉn video.');
  };

  // H√†m t√¨m ki·∫øm
  const handleSearch = async (command) => {
    let query = command.replace(/^t√¨m ki·∫øm\s*/i, '').trim();

    if (!query) {
      await speak('B·∫°n ch∆∞a n√≥i t·ª´ kho√°. H√£y n√≥i: t√¨m ki·∫øm c·ªông t·ª´ kho√°.');
      return;
    }

    history.push({
      pathname: '/search',
      state: { text: query },
    });

    await speak(`ƒêang t√¨m ki·∫øm t·ª´ kho√°: ${query}`);
  };

  // H√†m ch√†o m·ª´ng
  const Greet = () => {
    speak(
      'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi website ƒëi·ªÅu khi·ªÉn b·∫±ng gi·ªçng n√≥i. Vui l√≤ng xem danh s√°ch l·ªánh! C√°c l·ªánh n√†y s·∫Ω gi√∫p b·∫°n ƒëi·ªÅu khi·ªÉn website b·∫±ng gi·ªçng n√≥i. Nh·∫•n n√∫t Ti·∫øp theo ƒë·ªÉ b·∫Øt ƒë·∫ßu!'
    );
  };

  // Chuy·ªÉn trang video
  const prevPage = () => {
    setStart((prev) => prev - 12);
    setEnd((prev) => prev - 12);
    setCountPages((prev) => prev - 1);
  };

  const nextPage = () => {
    setStart((prev) => prev + 12);
    setEnd((prev) => prev + 12);
    setCountPages((prev) => prev + 1);
  };


  // 2.4 JSX =======================================================================================
  return (
    <div className="App">
      <ToastContainer />

      {popUp && (
        <PopUp
          setPopUp={setPopUp}
          setIsRecognitionActive={setIsRecognitionActive}
        />
      )}
      {openVideoHome && (
        <OpenVideoHome
          setOpenVideoHome={setOpenVideoHome}
          selectedVideos={selectedVideos}
        />
      )}
      <Navbar />

      <Switch>
        <Route exact path="/" component={Home} />
        <Route exact path="/video/:id">
          <CurrentVideo setVideoRef={(player) => (videoRef.current = player)} />
        </Route>
        <Route path="/videos">
          <Videos
            start={start}
            end={end}
            nextPage={nextPage}
            prevPage={prevPage}
            countPages={countPages}
          />
        </Route>
        <Route path="/chat" component={ChatWithAI} />
        <Route path="/instruction" component={InstructionScreen} />
        <Route path="/search">
          <Search setIsRecognitionActive={setIsRecognitionActive} />
        </Route>
        <Route component={Page404} />
      </Switch>
      <Footer />
    </div>
  );
};

export default App;
